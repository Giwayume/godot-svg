[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

vec4 cubic_ps(vec3 klm, vec4 color) {
	float k = klm.x;
	float l = klm.y;
	float m = klm.z;
	
	// Gradients
	vec3 dpdx = dFdx(klm);
	vec3 dpdy = dFdy(klm);
	
	// Chain rule
	vec3 dfdp = vec3(3.0 * k * k, -l, -m);
	vec2 f = vec2(dot(dfdp, dpdx), dot(dfdp, dpdy));

	// Linear algebra
	float isoval = (k * k * k - l * m);
	float miplevel = length(f);
	isoval /= miplevel;
	
	isoval = 0.5 - isoval;
	color.a = clamp(isoval, 0.0, 1.0);

	return color;
}

void fragment() {
	COLOR = cubic_ps(COLOR.rgb, vec4(0.0, 0.0, 0.0, 1.0));
}
"
