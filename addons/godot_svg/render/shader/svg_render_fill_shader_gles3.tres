[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

const float GRADIENT_TILING_RATIO = 1.0;

uniform vec4 fill_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec3 uv_transform_column_1 = vec3(1.0, 0.0, 0.0);
uniform vec3 uv_transform_column_2 = vec3(0.0, 1.0, 0.0);
uniform int gradient_type = 0;
uniform vec2 gradient_start_center = vec2(0.0, 0.0);
uniform float gradient_start_radius = 0.0;
uniform vec2 gradient_end_center = vec2(0.0, 0.0);
uniform float gradient_end_radius = 0.0;
uniform int gradient_repeat = 0;
uniform sampler2D fill_texture;
uniform sampler2D gradient_texture;

vec4 sample_gradient(float position) {
	if (position > 1.0) {
		position = 1.0;
	}
	if (position < 0.0) {
		position = 0.0;
	}
	return texture(gradient_texture, vec2(position, 0.0));
}

vec4 quadratic_ps(vec2 p, float inside_sign, vec4 color) {
	float u = p.x;
	float v = p.y;
	
	// Gradients
	vec2 dpdx = dFdx(p);
	vec2 dpdy = dFdy(p);

	// Chain rule
	float fx = (2.0 * u) * dpdx.x - dpdx.y;
	float fy = (2.0 * u) * dpdy.x - dpdy.y;
	
	// Linear algebra
	float sd = inside_sign * (u * u - v) / sqrt(fx * fx + fy * fy);
	
	float alpha = 0.5 - sd;
	color.a = clamp(sd, 0.0, 1.0) * color.a;
	
	return color;
}

vec4 cubic_ps(vec3 klm, float inside_sign, vec4 color) {

	// Gradients
	vec3 dpdx = dFdx(klm);
	vec3 dpdy = dFdy(klm);
	
	// Chain rule
	vec3 dfdp = vec3(3.0 * klm.x * klm.x, -klm.z, -klm.y);
	vec2 f = vec2(dot(dfdp, dpdx), dot(dfdp, dpdy));
	
	// Linear algebra
	float sd = inside_sign * (klm.x * klm.x * klm.x - klm.y * klm.z) / length(f);
	
	sd = 0.5 - sd;
	color.a = clamp(sd, 0.0, 1.0) * color.a;

	return color;
}

vec2 linearstep(vec2 edge0, vec2 edge1, vec2 x) {
	return clamp((x - (edge0)) / (edge1 - (edge0)), 0.0, 1.0);
}

vec4 antialiased_triangle(vec3 uv, vec4 color) {
	vec2 uv_pixel = fwidth(uv.xy) / 2.0;

	vec2 corner_border = linearstep(vec2(0.0), uv_pixel, uv.xy);
	vec2 hypotenuse_border = linearstep(vec2(1.0), vec2(1.0) - uv_pixel * 1.41, vec2(uv.x + uv.y));
	
	//  uv.z controls whether each edge has antialiasing.
	//  0           N/A     0.0
	//  0   to 1/6  a       0.08
	//  1/6 to 2/6  ab      0.25
	//  2/6 to 3/6  abc     0.42
	//  3/6 to 4/6  b       0.58
	//  4/6 to 5/6  bc      0.75
	//  5/6 to 6/6  c       0.92

	float a = max(step(uv.z, 0.01), step(0.5, uv.z));
	float b = max(step(uv.z, 0.16), step(0.83, uv.z));
	float c = min(step(uv.z, 0.66), max(step(uv.z, 0.33), step(0.5, uv.z)));
	
	float alpha = max(a, corner_border.x) * max(b, corner_border.y) * max(c, hypotenuse_border.x * hypotenuse_border.y);
	color.a *= alpha;
	
	return color;
}

vec4 antialiased_edge(vec2 uv, vec4 color) {
	vec2 half_uv_pixel = fwidth(uv.xy) / 2.0;
	vec2 line_antialias = linearstep(vec2(0.5), vec2(0.5 + half_uv_pixel.y, 0.5 - half_uv_pixel.y), uv.yy);
	color.a *= (1.0 - line_antialias.y) * (1.0 - line_antialias.x);
	return color;
}

vec4 linear_gradient(vec2 uv) {
	return vec4(1.0, 1.0, 1.0, 1.0);
}

vec4 radial_gradient(vec2 uv) {
	vec4 color = vec4(1.0, 1.0, 1.0, 1.0);
	
	vec2 center = gradient_end_center;
	vec2 end_point = center + vec2(gradient_end_radius, 0.0);
	vec2 focus = gradient_start_center;
	vec2 coord = uv;
	float radius = (gradient_end_radius - gradient_start_radius);
	float start_radius_applied = gradient_start_radius;
	vec2 texture_size = vec2(1.0, 1.0);
	float ellipse_ratio = texture_size.y / texture_size.x;
	
	vec2 axis = end_point - center;
	float l2 = dot(axis, axis);
	if (l2 != 0.0) {
		float d = dot(coord - center, axis) / l2;
		vec2 proj = center + d * axis;
		coord = proj - (proj - coord) * ellipse_ratio;
		
		float d2 = dot(focus - center, axis) / l2;
		vec2 proj2 = center + d2 * axis;
		focus = proj2 - (proj2 - focus) * ellipse_ratio;
	}
	
	float grad_length = 1.0;
	vec2 diff = focus - center;
	vec2 ray_dir = normalize(coord - focus);
	float a = dot(ray_dir, ray_dir);
	float b = 2.0 * dot(ray_dir, diff);
	float c = dot(diff, diff) - radius * radius;
	float disc = b * b - 4.0 * a * c;
	if (disc >= 0.0) {
		float t = (-b + sqrt(abs(disc))) / (2.0 * a);
		vec2 projection = focus + ray_dir * t;
		grad_length = distance(projection, focus);
	}
	else {
		// Gradient is undefined for this coordinate
	}
	
	float grad = (distance(coord, focus) - start_radius_applied) / grad_length * GRADIENT_TILING_RATIO;
	if (gradient_repeat == 1) { // GradientTexture2D.REPEAT
		color = sample_gradient(fract(grad));
	} else if (gradient_repeat == 2) { // GradientTexture2D.REPEAT_MIRROR
		bool is_mirror = mod(grad, 2.0) < 1.0;
		if (is_mirror) {
			color = sample_gradient(fract(grad));
		} else {
			color = sample_gradient(1.0 - fract(grad));
		}
	} else {  // GradientTexture2D.REPEAT_NONE
		color = sample_gradient(grad);
	}
	return color;
}

void fragment() {
	mat2 uv_rotation_scale = mat2(
		uv_transform_column_1.xy,
		uv_transform_column_2.xy
	);
	vec2 uv_translation = vec2(uv_transform_column_1.z, uv_transform_column_2.z);
	vec4 gradient_color = vec4(1.0, 1.0, 1.0, 1.0);
	vec2 transform_applied_uv = (uv_rotation_scale * UV) + uv_translation;
	if (gradient_type == 1) {
		gradient_color = linear_gradient(transform_applied_uv);
	} else if (gradient_type == 2) {
		gradient_color = radial_gradient(transform_applied_uv);
	}
	vec4 blend_color = texture(fill_texture, transform_applied_uv) * fill_color * gradient_color;
	if (COLOR.a < 0.3) {
		COLOR = quadratic_ps(COLOR.rg, 2.0 * (0.5 - step(COLOR.a, 0.15)), blend_color);
//		COLOR = vec4(0.0, 0.0, 0.0, 0.0);
	} else if (COLOR.a < 0.6) {
		COLOR = cubic_ps(COLOR.rgb, 2.0 * (0.5 - step(COLOR.a, 0.45)), blend_color);
//		COLOR = vec4(0.0, 0.0, 0.0, 0.0);
	} else if (COLOR.a < 0.8) {
		COLOR = blend_color;
//		COLOR = vec4(1.0, 0.0, 0.0, 1.0);
//		COLOR = vec4(0.0, 0.0, 0.0, 0.0);
	} else {
		COLOR = antialiased_edge(COLOR.rg, blend_color);
//		COLOR = antialiased_edge(COLOR.rg, vec4(1.0, 1.0, 1.0, 1.0));
	}
}
"
