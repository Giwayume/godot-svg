[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

uniform vec4 fill_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec2 uv_transform_origin = vec2(0.0, 0.0);
uniform vec2 uv_transform_scale = vec2(1.0, 1.0);
uniform sampler2D fill_texture;

vec4 quadratic_ps(vec2 p, vec4 color) {
	float u = p.x;
	float v = p.y;
	
	// Linear algebra
	float sd = (u * u - v);
	
	if (sd > 0.0) {
		color.a = 1.0;
	} else {
		color.a = 0.0;
	}

	return color;
}

vec4 cubic_ps(vec3 klm, vec4 color) {
	// Linear algebra
	float sd = klm.x * klm.x * klm.x - klm.y * klm.z;
	
	if (sd < 0.0) {
		color.a = 1.0;
	} else {
		color.a = 0.0;
	}

	return color;
}

void fragment() {
	vec4 blend_color = texture(fill_texture, (uv_transform_scale * UV + uv_transform_origin)) * fill_color;
	if (COLOR.a < 0.3) {
		COLOR = quadratic_ps(COLOR.rg, blend_color);
	} else if (COLOR.a < 0.6) {
		COLOR = cubic_ps(COLOR.rgb, blend_color);
	} else {
		COLOR = blend_color;
	}
}
"
