[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

const float GRADIENT_TILING_RATIO = 1.0;

uniform vec4 fill_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec3 uv_transform_column_1 = vec3(1.0, 0.0, 0.0);
uniform vec3 uv_transform_column_2 = vec3(0.0, 1.0, 0.0);
uniform int gradient_type = 0;
uniform vec2 gradient_start_center = vec2(0.0, 0.0);
uniform float gradient_start_radius = 0.0;
uniform vec2 gradient_end_center = vec2(0.0, 0.0);
uniform float gradient_end_radius = 0.0;
uniform int gradient_repeat = 0;
uniform sampler2D fill_texture;
uniform sampler2D gradient_texture;

vec4 sample_gradient(float position) {
	if (position > 1.0) {
		position = 1.0;
	}
	if (position < 0.0) {
		position = 0.0;
	}
	return texture(gradient_texture, vec2(position, 0.0));
}

vec4 quadratic_ps(vec2 p, float inside_sign, vec4 color) {
	float u = p.x;
	float v = p.y;
	
	// Linear algebra
	float sd = inside_sign * (u * u - v);
	
	if (sd > 0.0) {
		color.a = color.a;
	} else {
		color.a = 0.0;
	}

	return color;
}

vec4 cubic_ps(vec3 klm, float inside_sign, vec4 color) {
	// Linear algebra
	float sd = inside_sign * (klm.x * klm.x * klm.x - klm.y * klm.z);
	
	if (sd < 0.0) {
		color.a = color.a;
	} else {
		color.a = 0.0;
	}

	return color;
}


vec4 linear_gradient(vec2 uv) {
	return vec4(1.0, 1.0, 1.0, 1.0);
}

vec4 radial_gradient(vec2 uv) {
	vec4 color = vec4(1.0, 1.0, 1.0, 1.0);
	
	vec2 center = gradient_end_center;
	vec2 end_point = center + vec2(gradient_end_radius, 0.0);
	vec2 focus = gradient_start_center;
	vec2 coord = uv;
	float radius = (gradient_end_radius - gradient_start_radius);
	float start_radius_applied = gradient_start_radius;
	vec2 texture_size = vec2(1.0, 1.0);
	float ellipse_ratio = texture_size.y / texture_size.x;
	
	vec2 axis = end_point - center;
	float l2 = dot(axis, axis);
	if (l2 != 0.0) {
		float d = dot(coord - center, axis) / l2;
		vec2 proj = center + d * axis;
		coord = proj - (proj - coord) * ellipse_ratio;
		
		float d2 = dot(focus - center, axis) / l2;
		vec2 proj2 = center + d2 * axis;
		focus = proj2 - (proj2 - focus) * ellipse_ratio;
	}
	
	float grad_length = 1.0;
	vec2 diff = focus - center;
	vec2 ray_dir = normalize(coord - focus);
	float a = dot(ray_dir, ray_dir);
	float b = 2.0 * dot(ray_dir, diff);
	float c = dot(diff, diff) - radius * radius;
	float disc = b * b - 4.0 * a * c;
	if (disc >= 0.0) {
		float t = (-b + sqrt(abs(disc))) / (2.0 * a);
		vec2 projection = focus + ray_dir * t;
		grad_length = distance(projection, focus);
	}
	else {
		// Gradient is undefined for this coordinate
	}
	
	float grad = (distance(coord, focus) - start_radius_applied) / grad_length * GRADIENT_TILING_RATIO;
	if (gradient_repeat == 1) { // GradientTexture2D.REPEAT
		color = sample_gradient(fract(grad));
	} else if (gradient_repeat == 2) { // GradientTexture2D.REPEAT_MIRROR
		bool is_mirror = mod(grad, 2.0) < 1.0;
		if (is_mirror) {
			color = sample_gradient(fract(grad));
		} else {
			color = sample_gradient(1.0 - fract(grad));
		}
	} else {  // GradientTexture2D.REPEAT_NONE
		color = sample_gradient(grad);
	}
	return color;
}

void fragment() {
	mat2 uv_rotation_scale = mat2(
		uv_transform_column_1.xy,
		uv_transform_column_2.xy
	);
	vec2 uv_translation = vec2(uv_transform_column_1.z, uv_transform_column_2.z);
	vec4 gradient_color = vec4(1.0, 1.0, 1.0, 1.0);
	vec2 transform_applied_uv = (uv_rotation_scale * UV) + uv_translation;
	if (gradient_type == 1) {
		gradient_color = linear_gradient(transform_applied_uv);
	} else if (gradient_type == 2) {
		gradient_color = radial_gradient(transform_applied_uv);
	}
	vec4 blend_color = texture(fill_texture, transform_applied_uv) * fill_color * gradient_color;
	if (COLOR.a < 0.3) {
		COLOR = quadratic_ps(COLOR.rg, 2.0 * (0.5 - step(COLOR.a, 0.15)), blend_color);
	} else if (COLOR.a < 0.6) {
		COLOR = cubic_ps(COLOR.rgb, 2.0 * (0.5 - step(COLOR.a, 0.45)), blend_color);
	} else if (COLOR.a < 0.8) {
		COLOR = blend_color;
	} else {
		COLOR = vec4(0.0, 0.0, 0.0, 0.0);
	}
}
"
